{"version":3,"sources":["components/Header.js","components/NewNote.js","components/Display.js","components/InputBox.js","components/Login.js","components/LoginPopup.js","components/User.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","React","Component","NewNote","newNote","className","onClick","this","props","handleClick","Display","displayNotes","notesList","map","note","note_id","type","edit","delete","save","InputBox","input","placeholder","submit","show","Login","loginButton","login","loggedIn","LoginPopup","buttonName","isSignup","name","username","password","a","closePopup","handlePopup","signup","showPopup","User","title","logout","App","createUserRequest","fetch","method","headers","body","JSON","stringify","document","getElementsByName","value","res","text","console","log","setState","loginRequest","state","getUsername","getElementsByClassName","style","display","getElementById","handleAdd","addNoteClicked","showInputBox","handleCreate","event","inputField","alert","preventDefault","noteData","concat","updateDatabase","status","parse","userID","getNotes","URL","notes","handleEdit","noteID","save_id","contentEditable","handleDelete","newNotesList","splice","saveAfterEdit","textContent","toString","handleLogin","handleLogout","json","i","length","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.194cfd82.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Header.css';\r\n\r\nexport default class Header extends React.Component {\r\n  render(){\r\n    return <h1 id=\"header\">Note App</h1>\r\n  }\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport '../css/NewNote.css'\r\n\r\nexport default class NewNote extends React.Component {\r\n\r\n\r\n  render(){\r\n    const newNote = <button className=\"add-button\" onClick={this.props.handleClick}>Add a note +</button>\r\n    return (\r\n      <span className=\"main\">\r\n        {newNote}\r\n      </span>\r\n    );\r\n  }\r\n\r\n}","import React from 'react';\r\nimport '../css/Display.css';\r\n\r\nexport default class Display extends React.Component {\r\n\r\n  render(){\r\n    const notesList = this.props.notesList;\r\n    const displayNotes = notesList.map( (note,note_id) =>\r\n      <div id={ 'display-' + note_id } className=\"display\">\r\n        <p id={ 'note-' + note_id }>{note}</p>\r\n        <button type=\"button\" className=\"edit-button\"\r\n         onClick={ () => this.props.edit(note_id) }> Edit </button>\r\n        <button type=\"button\" className=\"delete-button\"\r\n         onClick = { () => this.props.delete(note_id) } > Delete </button>\r\n        <button type=\"button\" id={ 'save-' + note_id } className=\"save-button\"\r\n         onClick = { () => this.props.save(note_id) } >Save </button>\r\n      </div> );\r\n\r\n    return <div>{displayNotes}</div>;\r\n  }\r\n}","import React from 'react';\r\nimport '../css/InputBox.css'\r\n\r\nexport default class InputBox extends React.Component {\r\n\r\n\r\n  render(){\r\n    const input = <input type=\"text\" placeholder=\"Enter a note\" id=\"inputNote\" />;\r\n    const submit = <button type=\"button\" className=\"create-note-button\" \r\n    onClick={this.props.handleClick}> Create Note </button>;\r\n\r\n    return (this.props.show)\r\n     ? ( <span className=\"input-box\">\r\n           {input}\r\n           {submit}\r\n         </span>)\r\n     : (null);\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport '../css/Login.css';\r\n\r\nexport default class Login extends React.Component {\r\n  render(){\r\n\r\n    const loginButton = <button type = \"button\" className = \"login-button\"\r\n    onClick = { this.props.login } > Login to save your notes! </button>\r\n    if(!this.props.loggedIn){\r\n      return (<span className=\"login\">{loginButton}</span>);\r\n    } else {\r\n      return (null);\r\n    }  \r\n  }\r\n}","import React from 'react';\r\nimport '../css/LoginPopup.css';\r\n\r\nexport default class LoginPopup extends React.Component {\r\n\r\n  render(){\r\n    let URL,buttonName;\r\n    if(this.props.isSignup) {\r\n      URL = \"http://localhost:8080/create\"\r\n      buttonName = \"CREATE ACCOUNT\";\r\n    }  \r\n    else {\r\n      URL = \"http://localhost:8080/auth\";\r\n      buttonName = \"LOGIN\";\r\n    } \r\n    const name = <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name\" />\r\n\r\n    const username = <input type=\"text\" name=\"username\" placeholder=\"ENTER USERNAME\"/>\r\n\r\n    const password = <input type=\"password\" name=\"password\" placeholder=\"ENTER PASSWORD\"/>\r\n\r\n    const loginButton = <button type=\"submit\" className=\"login-submit\" onClick={this.props.a}>{buttonName}</button>;\r\n\r\n    const closePopup = <button type=\"text\" className=\"close-button\"\r\n     onClick={this.props.handlePopup}></button>;\r\n\r\n    const signup = <button type=\"button\" className=\"login-submit\" onClick={this.props.signup}>Don't have an account? Sign up!</button>  \r\n   \r\n    return (this.props.showPopup) \r\n    ?(\r\n      <div className=\"login-popup\">\r\n        {/* <iframe name=\"dummyframe\" id=\"dummyframe\" style={{display: 'none'}}></iframe> */}\r\n        {/* <form action={URL} method=\"POST\"> */}\r\n        <div>\r\n        {name}  \r\n        <br /><br />\r\n        {username}\r\n        <br /><br />\r\n        {password}\r\n        <br /><br />\r\n        {loginButton}\r\n        <br /> <br />\r\n        {signup}\r\n        {closePopup}\r\n        </div>\r\n        {/* </form> */}\r\n      </div>\r\n    ) :  null \r\n  \r\n  }\r\n}","import React from 'react';\r\nimport '../css/User.css';\r\n\r\nexport default class User extends React.Component {\r\n\r\n\r\n  render(){\r\n    if(this.props.loggedIn){\r\n      return (\r\n        <div className=\"dropdown\">\r\n          <button title=\"Account Settings\"className=\"user-settings\">\r\n            <div className=\"dropdown-content\">\r\n              <button type=\"button\" onClick = {this.props.logout}> Logout</button>\r\n              <button type=\"button\">Edit Profile</button>\r\n            </div>\r\n          </button>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (null);\r\n    }\r\n\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport NewNote from './components/NewNote';\nimport Display from './components/Display';\nimport InputBox from './components/InputBox';\nimport Login from './components/Login';\nimport LoginPopup from './components/LoginPopup';\nimport User from './components/User';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      notesList : [],\n      addNoteClicked : false,\n      showInputBox : false,\n      showPopup : false,\n      signup : false,\n      loggedIn : false,\n      username : null,\n      userID : null\n    };\n  }\n\n  createUserRequest = async () => {\n    const URL = \"http://localhost:5000/create\";\n    const res = await fetch(URL, {\n      method : 'POST',\n      headers : {\n        'Content-type' : 'application/json'\n      },\n      body : JSON.stringify({\n        name     : document.getElementsByName('name')[0].value,\n        username : document.getElementsByName('username')[0].value,\n        password : document.getElementsByName('password')[0].value\n      })\n    });\n    const body = await res.text();\n    console.log(body);\n    this.setState({\n      showPopup : false\n    })\n}\n\n  loginRequest = async () => {\n    if (!this.state.signup) {\n      console.log('login request');\n      const URL = \"/auth\";\n      const res = await\n      fetch(URL, {\n        method: 'POST',\n        headers : {\n          'Content-type' : 'application/json'\n        },\n        body : JSON.stringify({\n          username : document.getElementsByName('username')[0].value,\n          password : document.getElementsByName('password')[0].value\n        }\n      )\n      });\n      let body = await res.text();\n      console.log(body);\n      this.getUsername();\n    } else {\n        this.createUserRequest();\n    }\n  }\n\n\n\n  signup = () => {\n    document.getElementsByClassName('login-submit')[1].style.display = 'none';\n    document.getElementById('name').style.display = 'initial';\n    this.setState({\n      signup : true\n    });\n  }\n\n  handleAdd = () => {\n    this.setState({\n      addNoteClicked : true,\n      showInputBox : true\n    })\n    console.log('button clicked');\n  }\n\n  handleCreate = (event) => {\n   const inputField =  document.getElementById('inputNote');\n   if(inputField.value === ''){\n    alert(\"Note can't be empty\");\n     event.preventDefault();\n     return;\n   }\n   const noteData = inputField.value;\n   if(this.state.loggedIn){\n    this.setState({\n      notesList : this.state.notesList.concat(noteData),\n      showInputBox : false\n    },this.updateDatabase);\n  } else {\n    this.setState({\n      notesList : this.state.notesList.concat(noteData),\n      showInputBox : false\n    });\n  }\n  }\n\n  getUsername = async () => {\n    const URL = \"http://localhost:5000/auth\";\n    const res = await fetch(URL, {\n      method: 'GET',\n      // credentials: 'include',\n      headers: { 'Content-Type': 'text/plain',\n      'Accept': 'application/json'\n     }\n    });\n    let body = await res.text();\n    console.log(res.status);\n    console.log(body);\n    body = JSON.parse(body);\n    //if login successful\n    if(body.loggedIn) this.setState({\n      loggedIn : body.loggedIn,\n      username : body.username,\n      userID :   body.userID,\n      showPopup : false\n    })\n    else {\n      alert('Wrong Username/Password');\n    }\n    this.getNotes();\n    // return body;\n  }\n\n\n  updateDatabase = async () => {\n    const userID = this.state.userID;\n    const URL = `http://localhost:5000/api/notes/${userID}`;\n    // const noteKey = 'Notes for ID:' + userID;\n    const res = await fetch(URL, {\n      method : 'POST',\n      headers: {'Content-Type': 'application/json'},\n      body : JSON.stringify({\n        notes : this.state.notesList\n      })\n    });\n    let body = await res.text();\n    console.log(body);\n\n  }\n\n  handleEdit = (noteID) => {\n    const id = 'note-' + noteID;\n    const save_id = 'save-' + noteID;\n    document.getElementById(id).contentEditable = 'true';\n    document.getElementById(save_id).style.display = 'initial';//show save button once edit clicked\n  }\n\n\n  handleDelete = (noteID) => {\n    const id = 'display-' + noteID;\n    console.log(id);\n\n    //delete the note and update state\n    const newNotesList = this.state.notesList;\n    newNotesList.splice(noteID,1);\n\n    if (this.state.loggedIn) {\n      this.setState({\n        notesList : newNotesList\n      }, this.updateDatabase)\n    } else {\n        this.setState({\n          notesList : newNotesList\n        });\n      }\n  }\n\n  saveAfterEdit = (noteID) => {\n    const id = 'note-' + noteID;\n    const save_id = 'save-' + noteID;\n    document.getElementById(id).contentEditable = 'false';\n    document.getElementById(save_id).style.display = 'none';//hide save button after save clicked\n\n    //replacing the note with the edited note and updating state\n    const newNotesList = this.state.notesList;\n    const newNote = document.getElementById(id).textContent;\n    console.log(id);\n    console.log(newNote);\n    newNotesList.splice(noteID,1,newNote);\n    console.log('after edit:'+newNotesList.toString());\n    if (this.state.loggedIn) {\n      this.setState({\n        notesList : newNotesList\n      }, this.updateDatabase)\n    } else {\n        this.setState({\n          notesList : newNotesList\n        });\n      }\n  }\n\n  handleLogin = () => {\n    console.log('login clicked');\n    this.setState({\n      showPopup : ! this.state.showPopup,\n      signup : false\n    })\n  }\n\n  handleLogout = async () => {\n    const URL = 'http://localhost:5000/logout';\n    const res = await fetch(URL, {\n      method : 'POST'\n    });\n    if(res.status === 200)\n     this.setState({\n      loggedIn : false,\n      username : null,\n      userID   : null,\n      notesList : []\n    });\n  }\n\n  getNotes = async () => {\n    console.log('func');\n    const userID = this.state.userID;\n    // const userID = 1;\n    const URL = `http://localhost:5000/notes/${userID}`;\n    const res = await fetch(URL, {\n      method: 'GET',\n      headers: { 'Content-Type': 'text/plain',\n      'Accept': 'application/json'\n     }\n    })\n    const body = await res.json();\n    var newNotesList = [];\n    for(let i=0;i<body.length;i++){\n      newNotesList.push(body[i].note);\n    }\n    this.setState({\n      notesList : newNotesList\n    })\n  }\n\n  \n\n  render(){\n    return (this.state.addNoteClicked) \n      ?(\n        <div>\n          <Header />\n          <LoginPopup showPopup = {this.state.showPopup} handlePopup = {this.handleLogin}\n           signup = {this.signup} isSignup = {this.state.signup} a = {this.loginRequest}/>\n          <Login login = {this.handleLogin} loggedIn = {this.state.loggedIn}\n           username = {this.state.username}/>\n          <NewNote handleClick = {this.handleAdd}/>\n          <InputBox handleClick = {this.handleCreate} show = {this.state.showInputBox} />\n          <Display notesList = {this.state.notesList}\n           edit = {this.handleEdit} delete = {this.handleDelete} save = {this.saveAfterEdit} />\n           <User loggedIn = {this.state.loggedIn} logout = {this.handleLogout} />\n        </div>)\n      : (<div>\n          <Header />\n          <LoginPopup showPopup = {this.state.showPopup} handlePopup = {this.handleLogin}\n           signup = {this.signup} isSignup = {this.state.signup} a = {this.loginRequest}/>\n          <Login login = {this.handleLogin} loggedIn = {this.state.loggedIn}\n           username = {this.state.username}/>\n          <NewNote handleClick = {this.handleAdd}/>\n          <Display notesList = {this.state.notesList}\n           edit = {this.handleEdit} delete = {this.handleDelete} save = {this.saveAfterEdit} />\n          <User loggedIn = {this.state.loggedIn} logout = {this.handleLogout} />\n         </div>);  \n     \n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}